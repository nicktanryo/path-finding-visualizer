{"version":3,"sources":["img/logo512.png","components/Header/Title.tsx","algorithms/path/index.ts","algorithms/path/dijkstra.ts","algorithms/path/astar.ts","parameter/algorithm.ts","components/Header/AlgorithmMenu.tsx","parameter/speed.ts","components/Header/SpeedMenu.tsx","algorithms/maze/recursiveDivision.ts","parameter/maze.ts","algorithms/maze/random.ts","components/Header/MazeMenu.tsx","components/Header/index.tsx","parameter/board.ts","utilities/mouseEvents.ts","components/Content/Board.tsx","components/Content/index.tsx","utilities/board.ts","utilities/cell.ts","components/index.tsx","components/Copyright.tsx","App.tsx","index.tsx"],"names":["module","exports","useStyles","makeStyles","logo","display","Title","classes","Avatar","alt","src","variant","className","Typography","style","marginLeft","makeCopyBoard","board","copyBoard","row","tempRow","cell","push","updateUnvisitedNeighbors","unvisitedNeighbors","column","neighbors","length","filter","isVisited","getUnvisitedNeighbors","neighborCell","distance","previous","getNeighbors","currentCell","manhattanDistance","target","Math","abs","ALGORITHM_OPTIONS","DIJKSTRA","ASTAR","ALGORITHM","startCell","targetCell","pathInOrder","unvisitedCells","cells","getBoardCells","sort","cellA","cellB","closestCell","shift","isWall","Infinity","modifiedBoard","visualizedPath","f_astar","openSet","path","a","b","neighbor","tempG","includes","AlgorithmMenu","algorithmContext","useContext","AlgorithmContext","FormControl","size","Select","value","algorithm","color","onChange","event","setAlgorithm","Object","keys","map","key","MenuItem","Capitalized","SPEED","SLOW","NORMAL","FAST","SpeedMenu","speedContext","SpeedContext","speed","setSpeed","ORIENTATION","restrictedPoints","getOrientation","width","height","randomInt","num","floor","random","MAZE_OPTIONS","RECURSIVE_DIVISION","RANDOM","MAZE","start","newBoard","newCell","cleanWalls","orientation","y","x","divide","i","j","horizontal","start_i","start_j","passage_i","passage_j","dx","dy","isStart","isTarget","restrictedPoint1","restrictedPoint2","w","h","MazeMenu","generateMaze","theme","appbar","backgroundColor","title","flex","alignItems","navigator","margin","navigation","Index","visualize","resetBoard","AppBar","position","Toolbar","Grid","container","justify","item","Button","onClick","str","split","word","toUpperCase","slice","toLowerCase","join","lg","ROW","COLUMN","BOARD_SIZE","CELL_SIZE","OBJECT","START","TARGET","toggleWall","produce","tempBoard","wallCell","handleMouseDown","setBoard","setMouseDown","mouseDown","setHoldingPiece","holdingPiece","setPrevPiece","prevPiece","setSTART","setTARGET","boardRef","handleMouseEnter","prevI","prevJ","movePiece","handleMouseUp","spot","flexDirection","border","svg","Board","boardContext","BoardContext","SetBoard","useState","indexI","id","indexJ","params","onMouseDown","onMouseUp","onMouseEnter","onTouchStart","onTouchMove","onTouchEnd","classname","createBoard","isPassed","React","createContext","undefined","useRef","animated","setAnimated","boardSize","setBoardSize","resetRefs","current","querySelector","cname","err","boardContextInitValue","cleanBoard","getBoardSize","chrome","test","userAgent","document","documentElement","clientHeight","window","innerHeight","clientWidth","innerWidth","headerOffset","newBoardSize","Start","Target","useEffect","resizeWindow","Provider","Header","pathAlgorithm","pathLength","setTimeout","finalPath","shortestPath","unshift","getShortestPath","animatePath","animateBoard","MAZE_OPTION","mazeOption","ref","Content","copyright","marginTop","spacing","marginBottom","Copyright","align","Link","href","Date","getFullYear","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.48cc1465.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo512.bcef91fe.png\";","import React, { ReactElement } from \"react\";\nimport { makeStyles, Avatar, Typography } from \"@material-ui/core\";\nimport logo from \"../../img/logo512.png\";\n\nconst useStyles = makeStyles(() => ({\n    logo: {\n        display: \"inline\",\n    },\n}));\n\nfunction Title(): ReactElement {\n    const classes = useStyles();\n    return (\n        <>\n            <Avatar\n                alt=\"path-finding-visualizer\"\n                src={logo}\n                variant=\"square\"\n                className={classes.logo}\n            />\n\n            <Typography variant=\"h6\" style={{ marginLeft: \"5px\" }}>\n                Path Finding Visualizer\n            </Typography>\n        </>\n    );\n}\n\nexport default Title;\n","import { IBoard } from \"../../utilities/board\";\nimport { ICell } from \"../../utilities/cell\";\nimport { coordinate } from \"../../parameter/board\";\n\nexport interface IAlgorithmFunction {\n    board: IBoard;\n    startCell: ICell;\n    targetCell: ICell;\n}\n\nexport interface IAlgorithmResult {\n    modifiedBoard: IBoard;\n    visualizedPath: Array<ICell>;\n}\n\nexport function makeCopyBoard(board: IBoard): IBoard {\n    const copyBoard: IBoard = [];\n    for (let row of board) {\n        const tempRow: ICell[] = [];\n        for (let cell of row) {\n            tempRow.push({\n                ...cell,\n            });\n        }\n        copyBoard.push(tempRow);\n    }\n    return copyBoard;\n}\n\nexport function getShortestPath(\n    board: IBoard,\n    TARGET: coordinate\n): Array<ICell> {\n    let copyBoard = makeCopyBoard(board);\n    let start: ICell = copyBoard[TARGET.y][TARGET.x];\n    if (!start.previous) return [];\n    start.isPassed = true;\n    let shortestPath = [start];\n    while (!!start.previous) {\n        start.previous.isPassed = true;\n        shortestPath.unshift(start.previous);\n        start = start.previous;\n    }\n    return shortestPath;\n}\n","import { ICell } from \"../../utilities/cell\";\nimport { IBoard } from \"../../utilities/board\";\nimport { IAlgorithmFunction, IAlgorithmResult, makeCopyBoard } from \".\";\n\nexport function Dijkstra({\n    board,\n    startCell,\n    targetCell,\n}: IAlgorithmFunction): IAlgorithmResult {\n    const copyBoard: IBoard = makeCopyBoard(board);\n\n    copyBoard[startCell.row][startCell.column].distance = 0;\n\n    const pathInOrder: Array<ICell> = [];\n\n    const unvisitedCells: Array<ICell> = getBoardCells(copyBoard);\n\n    while (!!unvisitedCells.length) {\n        sortCellsByDistance(unvisitedCells);\n\n        const closestCell: ICell = unvisitedCells.shift() as ICell;\n        if (closestCell.isWall) continue;\n        if (closestCell.distance === Infinity)\n            return { modifiedBoard: copyBoard, visualizedPath: pathInOrder };\n\n        closestCell.isVisited = true;\n        pathInOrder.push(closestCell);\n        if (\n            closestCell.column === targetCell.column &&\n            closestCell.row === targetCell.row\n        )\n            return { modifiedBoard: copyBoard, visualizedPath: pathInOrder };\n\n        updateUnvisitedNeighbors(closestCell, copyBoard);\n    }\n    return { modifiedBoard: copyBoard, visualizedPath: pathInOrder };\n}\n\nfunction updateUnvisitedNeighbors(cell: ICell, board: IBoard): void {\n    const unvisitedNeighbors: Array<ICell> = getUnvisitedNeighbors(cell, board);\n    for (const neighborCell of unvisitedNeighbors) {\n        neighborCell.distance = cell.distance + 1;\n        neighborCell.previous = cell;\n    }\n}\n\nfunction getUnvisitedNeighbors(cell: ICell, board: IBoard): Array<ICell> {\n    const { row, column } = cell;\n    let neighbors: Array<ICell> = [];\n\n    if (row > 0) neighbors.push(board[row - 1][column]);\n    if (row < board.length - 1) neighbors.push(board[row + 1][column]);\n    if (column > 0) neighbors.push(board[row][column - 1]);\n    if (column < board[0].length - 1) neighbors.push(board[row][column + 1]);\n\n    return neighbors.filter((cell) => !cell.isVisited);\n}\n\nfunction sortCellsByDistance(cells: Array<ICell>): void {\n    cells.sort((cellA, cellB) => cellA.distance - cellB.distance);\n}\n\nfunction getBoardCells(board: IBoard): Array<ICell> {\n    let cells: Array<ICell> = [];\n    for (const row of board) {\n        for (const cell of row) {\n            cells.push(cell);\n        }\n    }\n    return cells;\n}\n","import { IAlgorithmFunction, IAlgorithmResult, makeCopyBoard } from \".\";\nimport { ICell } from \"../../utilities/cell\";\nimport { IBoard } from \"../../utilities/board\";\n\nexport function Astar({\n    board,\n    startCell,\n    targetCell,\n}: IAlgorithmFunction): IAlgorithmResult {\n    const copyBoard = makeCopyBoard(board);\n    copyBoard[startCell.row][startCell.column].distance = 0;\n    copyBoard[startCell.row][startCell.column].f_astar = manhattanDistance(\n        startCell,\n        targetCell\n    );\n\n    let openSet: Array<ICell> = [];\n    openSet.push(copyBoard[startCell.row][startCell.column]);\n\n    let path: Array<ICell> = [];\n\n    while (!!openSet.length) {\n        sort(openSet);\n        let currentCell: ICell = openSet.shift() as ICell;\n\n        if (currentCell.isWall) continue;\n        if (currentCell.distance === Infinity)\n            return { modifiedBoard: copyBoard, visualizedPath: path };\n\n        path.push(currentCell);\n        currentCell.isVisited = true;\n        if (\n            currentCell.row === targetCell.row &&\n            currentCell.column === targetCell.column\n        )\n            return { modifiedBoard: copyBoard, visualizedPath: path };\n\n        let neighbors: Array<ICell> = getNeighbors(copyBoard, currentCell);\n        for (let neighbor of neighbors) {\n            let tempG: number = currentCell.distance + 1;\n            if (tempG < neighbor.distance) {\n                neighbor.distance = tempG;\n                neighbor.f_astar =\n                    tempG + manhattanDistance(targetCell, neighbor);\n                neighbor.previous = currentCell;\n                if (!openSet.includes(neighbor)) {\n                    openSet.push(neighbor);\n                }\n            }\n        }\n    }\n    return { modifiedBoard: copyBoard, visualizedPath: path };\n}\n\nfunction sort(set: Array<ICell>) {\n    set.sort((a: ICell, b: ICell) => (a.f_astar > b.f_astar ? 1 : -1));\n}\n\nfunction getNeighbors(board: IBoard, currentCell: ICell) {\n    const { row, column } = currentCell;\n    let neighbors = [];\n    if (row > 0) neighbors.push(board[row - 1][column]);\n    if (row < board.length - 1) neighbors.push(board[row + 1][column]);\n    if (column > 0) neighbors.push(board[row][column - 1]);\n    if (column < board[0].length - 1) neighbors.push(board[row][column + 1]);\n    return neighbors;\n}\n\nfunction manhattanDistance(target: ICell, cell: ICell) {\n    return (\n        Math.abs(target.row - cell.row) + Math.abs(target.column - cell.column)\n    );\n}\n","import { Dijkstra } from \"../algorithms/path/dijkstra\";\nimport { IDataString, IDataFunction, func } from \".\";\nimport { Astar } from \"../algorithms/path/astar\";\n\ninterface IALGORITHM_OPTIONS extends IDataString {\n    DIJKSTRA: string;\n    ASTAR: string;\n}\n\ninterface IALGORITHM extends IDataFunction {\n    DIJKSTRA: func;\n    ASTAR: func;\n}\n\nconst ALGORITHM_OPTIONS: IALGORITHM_OPTIONS = {\n    DIJKSTRA: \"DIJKSTRA\",\n    ASTAR: \"ASTAR\",\n};\nconst ALGORITHM: IALGORITHM = {\n    DIJKSTRA: Dijkstra as func,\n    ASTAR: Astar as func,\n};\n\nexport { ALGORITHM_OPTIONS, ALGORITHM };\n","import React, { ReactElement, useContext } from \"react\";\nimport { FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { AlgorithmContext, IAlgorithmContext } from \"../index\";\nimport { ALGORITHM_OPTIONS } from \"../../parameter/algorithm\";\nimport { Capitalized } from \".\";\n\nfunction AlgorithmMenu(): ReactElement {\n    const algorithmContext = useContext<IAlgorithmContext>(AlgorithmContext);\n\n    return (\n        <FormControl size=\"small\">\n            <Select\n                variant=\"outlined\"\n                value={algorithmContext.algorithm}\n                color=\"primary\"\n                onChange={(event) => {\n                    if (algorithmContext.setAlgorithm)\n                        algorithmContext.setAlgorithm(\n                            event.target.value as string\n                        );\n                }}\n            >\n                {Object.keys(ALGORITHM_OPTIONS).map((key) => {\n                    return (\n                        <MenuItem\n                            key={`algo-${key}`}\n                            value={ALGORITHM_OPTIONS[key]}\n                        >\n                            {Capitalized(ALGORITHM_OPTIONS[key])}\n                        </MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default AlgorithmMenu;\n","import { IDataNumber } from \".\";\n\ninterface ISPEED extends IDataNumber {\n    SLOW: number;\n    NORMAL: number;\n    FAST: number;\n}\n\nconst SPEED: ISPEED = {\n    SLOW: 50,\n    NORMAL: 35,\n    FAST: 20,\n};\n\nexport { SPEED };\n","import React, { ReactElement, useContext } from \"react\";\nimport { SpeedContext, ISpeedContext } from \"..\";\nimport { SPEED } from \"../../parameter/speed\";\nimport { MenuItem, Select, FormControl } from \"@material-ui/core\";\n\nfunction SpeedMenu(): ReactElement {\n    const speedContext = useContext<ISpeedContext>(SpeedContext);\n    return (\n        <>\n            <FormControl size=\"small\">\n                <Select\n                    variant=\"outlined\"\n                    value={speedContext.speed}\n                    color=\"primary\"\n                    onChange={(event) => {\n                        speedContext.setSpeed &&\n                            speedContext.setSpeed(event.target.value as number);\n                    }}\n                >\n                    {Object.keys(SPEED).map((key) => {\n                        return (\n                            <MenuItem key={`algo-${key}`} value={SPEED[key]}>\n                                {key}\n                            </MenuItem>\n                        );\n                    })}\n                </Select>\n            </FormControl>\n        </>\n    );\n}\n\nexport default SpeedMenu;\n","import { IBoard } from \"../../utilities/board\";\nimport { IAlgorithmResult, makeCopyBoard } from \"../path\";\nimport { ICell } from \"../../utilities/cell\";\nimport { IMazeInput } from \"../../parameter/maze\";\n\nconst ORIENTATION = {\n    HORIZONTAL: \"HORIZONTAL\",\n    VERTICAL: \"VERTICAL\",\n};\n\nvar restrictedPoints: string[] = [];\n\nexport function RecursiveDivision({\n    board,\n    start,\n    target,\n}: IMazeInput): IAlgorithmResult {\n    const copyBoard: IBoard = cleanWalls(makeCopyBoard(board));\n    const height: number = board.length;\n    const width: number = board[0].length;\n    const orientation: string = getOrientation(width, height);\n    const path: ICell[] = [];\n    restrictedPoints = [`${start.y} ${start.x}`, `${target.y} ${target.x}`];\n\n    divide(copyBoard, path, 0, 0, height, width, orientation);\n\n    return { modifiedBoard: copyBoard, visualizedPath: path };\n}\n\nfunction cleanWalls(board: IBoard) {\n    const newBoard: IBoard = [];\n    for (let row of board) {\n        let tempRow: Array<ICell> = [];\n        for (let cell of row) {\n            let newCell: ICell = {\n                ...cell,\n                isWall: false,\n            };\n            tempRow.push(newCell);\n        }\n        newBoard.push(tempRow);\n    }\n    return newBoard;\n}\n\nfunction getOrientation(width: number, height: number) {\n    return width > height ? ORIENTATION.VERTICAL : ORIENTATION.HORIZONTAL;\n}\n\nfunction divide(\n    board: IBoard,\n    visualizedPath: ICell[],\n    i: number,\n    j: number,\n    height: number,\n    width: number,\n    orientation: string\n): void {\n    if (width < 2 || height < 2 || (height <= 2 && width <= 2)) return;\n    const horizontal = orientation === ORIENTATION.HORIZONTAL;\n\n    // start coordinate\n    let start_i = i + (horizontal ? 1 + randomInt(height - 2) : 0);\n    let start_j = j + (horizontal ? 0 : 1 + randomInt(width - 2));\n\n    // passage coordinate\n    let passage_i = start_i + (horizontal ? 0 : randomInt(height - 1));\n    let passage_j = start_j + (horizontal ? randomInt(width - 1) : 0);\n\n    // direction\n    const dx = horizontal ? 1 : 0;\n    const dy = horizontal ? 0 : 1;\n\n    // wall length\n    const length = horizontal ? width : height;\n\n    // set wall\n    for (let i = 0; i < length; i++) {\n        if (\n            (start_i !== passage_i || start_j !== passage_j) &&\n            !restrictedPoints.includes(`${start_i} ${start_j}`)\n        ) {\n            board[start_i][start_j].isWall = true;\n            visualizedPath.push(board[start_i][start_j]);\n        }\n\n        // make sure wall does not block the start and target point\n        if (\n            board[start_i][start_j].isStart ||\n            board[start_i][start_j].isTarget\n        ) {\n            restrictedPoints.push(`${start_i + 1} ${start_j}`);\n            restrictedPoints.push(`${start_i} ${start_j + 1}`);\n            restrictedPoints.push(`${start_i - 1} ${start_j}`);\n            restrictedPoints.push(`${start_i} ${start_j - 1}`);\n        }\n\n        start_i += dy;\n        start_j += dx;\n    }\n\n    // create restricted points to keep passage way open\n    let restrictedPoint1 = horizontal\n        ? `${passage_i + 1} ${passage_j}`\n        : `${passage_i} ${passage_j + 1}`;\n    let restrictedPoint2 = horizontal\n        ? `${passage_i - 1} ${passage_j}`\n        : `${passage_i} ${passage_j - 1}`;\n\n    restrictedPoints.push(restrictedPoint1);\n    restrictedPoints.push(restrictedPoint2);\n\n    // recurse first half of the board\n    let w = horizontal ? width : start_j - j;\n    let h = horizontal ? start_i - i : height;\n    divide(board, visualizedPath, i, j, h, w, getOrientation(w, h));\n\n    // recurse second half of the board\n    let nj = horizontal ? j : start_j + 1;\n    let ni = horizontal ? start_i + 1 : i;\n    w = horizontal ? width : j + width - start_j - 1;\n    h = horizontal ? i + height - start_i - 1 : height;\n    divide(board, visualizedPath, ni, nj, h, w, getOrientation(w, h));\n}\n\nfunction randomInt(num: number) {\n    return Math.floor(Math.random() * num);\n}\n","import { IDataString } from \".\";\nimport { Random } from \"../algorithms/maze/random\";\nimport { IAlgorithmResult } from \"../algorithms/path\";\nimport { IBoard } from \"../utilities/board\";\nimport { RecursiveDivision } from \"../algorithms/maze/recursiveDivision\";\nimport { coordinate } from \"./board\";\n\ninterface IMAZE_OPTIONS extends IDataString {\n    RANDOM: string;\n}\n\nconst MAZE_OPTIONS: IMAZE_OPTIONS = {\n    RECURSIVE_DIVISION: \"RECURSIVE_DIVISION\",\n    RANDOM: \"RANDOM\",\n};\ninterface IDataFunctionEmpty {\n    [key: string]: (value: IMazeInput) => IAlgorithmResult;\n}\nexport interface IMazeInput {\n    board: IBoard;\n    start: coordinate;\n    target: coordinate;\n}\ninterface IMAZE extends IDataFunctionEmpty {\n    RECURSIVE_DIVISION: (value: IMazeInput) => IAlgorithmResult;\n    RANDOM: (value: IMazeInput) => IAlgorithmResult;\n}\n\nconst MAZE: IMAZE = {\n    RECURSIVE_DIVISION: RecursiveDivision,\n    RANDOM: Random,\n};\n\nexport { MAZE, MAZE_OPTIONS };\n","import { IAlgorithmResult, makeCopyBoard } from \"../path\";\nimport { IBoard } from \"../../utilities/board\";\nimport { ICell } from \"../../utilities/cell\";\nimport { IMazeInput } from \"../../parameter/maze\";\n\nexport function Random({ board }: IMazeInput): IAlgorithmResult {\n    const copyBoard: IBoard = makeCopyBoard(board);\n    const path: Array<ICell> = [];\n    for (let row of copyBoard) {\n        for (let cell of row) {\n            if (cell.isStart || cell.isTarget) continue;\n            if (Math.random() < 0.3) {\n                cell.isWall = true;\n                path.push(cell);\n            } else {\n                cell.isWall = false;\n            }\n        }\n    }\n    return { visualizedPath: path, modifiedBoard: copyBoard };\n}\n","import React, { ReactElement } from \"react\";\nimport { FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { MAZE_OPTIONS } from \"../../parameter/maze\";\nimport { Capitalized } from \".\";\n\ninterface Props {\n    generateMaze: (MAZE_OPTION: string) => void;\n}\n\nfunction MazeMenu({ generateMaze }: Props): ReactElement {\n    return (\n        <>\n            <FormControl size=\"small\">\n                <Select\n                    variant=\"outlined\"\n                    value={\"DEFAULT\"}\n                    color=\"primary\"\n                    onChange={(event) => {\n                        generateMaze(event.target.value as string);\n                    }}\n                >\n                    <MenuItem value=\"DEFAULT\">Generate Maze</MenuItem>\n                    {Object.keys(MAZE_OPTIONS).map((key) => {\n                        return (\n                            <MenuItem\n                                key={`algo-${key}`}\n                                value={MAZE_OPTIONS[key]}\n                            >\n                                {Capitalized(MAZE_OPTIONS[key] as string)}\n                            </MenuItem>\n                        );\n                    })}\n                </Select>\n            </FormControl>\n        </>\n    );\n}\n\nexport default MazeMenu;\n","import React, { ReactElement } from \"react\";\n\nimport {\n    AppBar,\n    Toolbar,\n    makeStyles,\n    Theme,\n    Grid,\n    Button,\n} from \"@material-ui/core\";\nimport Title from \"./Title\";\nimport AlgorithmMenu from \"./AlgorithmMenu\";\nimport SpeedMenu from \"./SpeedMenu\";\nimport MazeMenu from \"./MazeMenu\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    appbar: {\n        backgroundColor: \"#aa96da\",\n    },\n    title: {\n        flex: 1,\n        display: \"flex\",\n        alignItems: \"center\",\n    },\n    navigator: {\n        \"& div\": {\n            margin: \"0 5px 0 5px\",\n        },\n    },\n    navigation: {\n        color: \"white\",\n    },\n}));\n\ninterface Props {\n    visualize: () => void;\n    resetBoard: () => void;\n    generateMaze: (MAZE_OPTION: string) => void;\n}\n\nfunction Index({ visualize, resetBoard, generateMaze }: Props): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\" className={classes.appbar}>\n            <Toolbar>\n                <Grid container justify=\"space-between\">\n                    <Grid item className={classes.title}>\n                        <Title />\n                    </Grid>\n\n                    <Grid item className={classes.navigator}>\n                        <MazeMenu generateMaze={generateMaze} />\n                        <AlgorithmMenu />\n                        <SpeedMenu />\n                        <Button\n                            color=\"primary\"\n                            className={classes.navigation}\n                            onClick={visualize}\n                        >\n                            VISUALIZE\n                        </Button>\n                        <Button\n                            color=\"primary\"\n                            className={classes.navigation}\n                            onClick={resetBoard}\n                        >\n                            RESET\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Index;\n\nexport function Capitalized(str: string): string {\n    return str\n        .split(\"_\")\n        .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n        .join(\" \");\n}\n","export interface IBoardSize {\n    ROW: number;\n    COLUMN: number;\n}\n\nconst lg = {\n    ROW: 30,\n    COLUMN: 65,\n};\n\n// const md = {\n//     ROW: 20,\n//     COLUMN: 37,\n// };\n\nconst BOARD_SIZE: IBoardSize = lg;\n\nconst CELL_SIZE: number = BOARD_SIZE === lg ? 20 : 30;\n\nconst OBJECT: { START: string; TARGET: string } = {\n    START: \"isStart\",\n    TARGET: \"isTarget\",\n};\n\nexport interface coordinate {\n    x: number;\n    y: number;\n}\nconst START: coordinate = {\n    x: Math.floor(BOARD_SIZE.COLUMN / 3),\n    y: Math.floor(BOARD_SIZE.ROW / 2),\n};\n\nconst TARGET: coordinate = {\n    x: BOARD_SIZE.COLUMN - START.x,\n    y: Math.floor(BOARD_SIZE.ROW / 2),\n};\n\nexport { BOARD_SIZE, CELL_SIZE, START, TARGET, OBJECT };\n","import produce from \"immer\";\nimport React from \"react\";\nimport { IBoard } from \"./board\";\nimport { OBJECT, coordinate } from \"../parameter/board\";\n\nexport interface mouseEvent {\n    i: number;\n    j: number;\n    board: IBoard;\n    setBoard: React.Dispatch<React.SetStateAction<IBoard>>;\n    mouseDown: boolean;\n    setMouseDown: React.Dispatch<React.SetStateAction<boolean>>;\n    holdingPiece: string | null;\n    setHoldingPiece: React.Dispatch<React.SetStateAction<string | null>>;\n    prevPiece: Array<number>;\n    setPrevPiece: React.Dispatch<React.SetStateAction<Array<number>>>;\n    setSTART?: React.Dispatch<React.SetStateAction<coordinate>>;\n    setTARGET?: React.Dispatch<React.SetStateAction<coordinate>>;\n    boardRef: React.MutableRefObject<null> | undefined;\n}\n\nfunction toggleWall(board: IBoard, i: number, j: number): IBoard {\n    return produce(board, (tempBoard) => {\n        let cell = tempBoard[i][j];\n        let wallCell = {\n            ...cell,\n            isWall: !cell.isWall,\n        };\n        tempBoard[i][j] = wallCell;\n        return tempBoard;\n    });\n}\n// function toggleWallRef(\n//     boardRef: React.MutableRefObject<null> | undefined,\n//     i: number,\n//     j: number\n// ): void {\n//     const currentClassName = (boardRef as any).current\n//         .querySelector(`#cell-${i}-${j}-content`)\n//         .className.split(\" \");\n//     if (currentClassName.includes(\"wall\")) {\n//         (boardRef as any).current.querySelector(\n//             `#cell-${i}-${j}-content`\n//         ).className = currentClassName\n//             .filter((cname: string) => cname !== \"wall\")\n//             .filter(\n//                 (cname: string) => cname !== \"visited\" && cname !== \"passed\"\n//             )\n//             .join(\" \");\n//     } else {\n//         (boardRef as any).current.querySelector(\n//             `#cell-${i}-${j}-content`\n//         ).className =\n//             currentClassName\n//                 .filter(\n//                     (cname: string) => cname !== \"visited\" && cname !== \"passed\"\n//                 )\n//                 .join(\" \") + \" wall\";\n//     }\n// }\nfunction movePiece(\n    board: IBoard,\n    i: number,\n    j: number,\n    prevI: number,\n    prevJ: number,\n    holdingPiece: string\n): IBoard {\n    return produce(board, (tempBoard) => {\n        tempBoard[prevI][prevJ] = {\n            ...tempBoard[prevI][prevJ],\n            isStart: false,\n            isTarget: false,\n        };\n        tempBoard[i][j] = { ...tempBoard[i][j], [holdingPiece]: true };\n        return tempBoard;\n    });\n}\n\nexport function handleMouseDown({\n    i,\n    j,\n    board,\n    setBoard,\n    mouseDown,\n    setMouseDown,\n    holdingPiece,\n    setHoldingPiece,\n    prevPiece,\n    setPrevPiece,\n    setSTART,\n    setTARGET,\n    boardRef,\n}: mouseEvent): void {\n    setMouseDown(true);\n    const { isStart, isTarget } = board[i][j];\n    if (isStart || isTarget) {\n        setHoldingPiece(isStart ? OBJECT.START : OBJECT.TARGET);\n        setPrevPiece([i, j]);\n    } else {\n        // toggleWallRef(boardRef, i, j);\n        setBoard(toggleWall(board, i, j));\n    }\n}\n\nexport function handleMouseEnter({\n    i,\n    j,\n    board,\n    setBoard,\n    mouseDown,\n    setMouseDown,\n    holdingPiece,\n    setHoldingPiece,\n    prevPiece,\n    setPrevPiece,\n    setSTART,\n    setTARGET,\n    boardRef,\n}: mouseEvent) {\n    if (!mouseDown) return;\n    if (holdingPiece) {\n        if (\n            !board[i][j].isWall &&\n            ((holdingPiece === OBJECT.START && !board[i][j].isTarget) ||\n                (holdingPiece === OBJECT.TARGET && !board[i][j].isStart))\n        ) {\n            setBoard(\n                movePiece(board, i, j, prevPiece[0], prevPiece[1], holdingPiece)\n            );\n            setPrevPiece([i, j]);\n        }\n    } else {\n        if (board[i][j].isStart || board[i][j].isTarget) return;\n        // toggleWallRef(boardRef, i, j);\n        setBoard(toggleWall(board, i, j));\n    }\n}\n\nexport function handleMouseUp({\n    i,\n    j,\n    board,\n    setBoard,\n    mouseDown,\n    setMouseDown,\n    holdingPiece,\n    setHoldingPiece,\n    prevPiece,\n    setPrevPiece,\n    setSTART,\n    setTARGET,\n    boardRef,\n}: mouseEvent): void {\n    setMouseDown(false);\n    if (holdingPiece) {\n        const spot: coordinate = {\n            x: j,\n            y: i,\n        };\n        if (holdingPiece === OBJECT.START) {\n            if (setSTART) setSTART(spot);\n        } else if (holdingPiece === OBJECT.TARGET) {\n            if (setTARGET) setTARGET(spot);\n        }\n        setHoldingPiece(null);\n        setPrevPiece([-1, -1]);\n    }\n}\n","import React, { ReactElement, useState, useContext } from \"react\";\nimport classname from \"classname\";\nimport \"./Board.css\";\n\n// MUI --------------------------------------------------------------\nimport { Theme, makeStyles } from \"@material-ui/core\";\nimport ControlCameraIcon from \"@material-ui/icons/ControlCamera\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\n\n// parameters -------------------------------------------------------\nimport { CELL_SIZE } from \"../../parameter/board\";\n\n// utilities --------------------------------------------------------\nimport { IBoard } from \"../../utilities/board\";\nimport { ICell } from \"../../utilities/cell\";\nimport {\n    mouseEvent,\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp,\n} from \"../../utilities/mouseEvents\";\n\n//context -----------------------------------------------------------\nimport { BoardContext, IBoardContext } from \"../index\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    row: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n    },\n    cell: {\n        width: `${CELL_SIZE}px`,\n        height: `${CELL_SIZE}px`,\n        border: \".5px solid lightblue\",\n    },\n    svg: {\n        width: \"100%\",\n        height: \"100%\",\n    },\n}));\n\nfunction Board(): ReactElement {\n    const classes = useStyles();\n\n    const boardContext = useContext<IBoardContext>(BoardContext);\n    const {\n        board,\n        setBoard: SetBoard,\n        boardRef,\n        setSTART,\n        setTARGET,\n    } = boardContext;\n\n    const [mouseDown, setMouseDown] = useState<boolean>(false);\n    const [holdingPiece, setHoldingPiece] = useState<string | null>(null);\n    const [prevPiece, setPrevPiece] = useState<Array<number>>([-1, -1]);\n\n    return (\n        <>\n            {board.map((row: Array<ICell>, indexI: number) => {\n                return (\n                    <div\n                        key={`row-${indexI}`}\n                        id={`row-${indexI}`}\n                        className={classes.row}\n                    >\n                        {row.map((cell: ICell, indexJ: number) => {\n                            let setBoard = SetBoard as React.Dispatch<\n                                React.SetStateAction<IBoard>\n                            >;\n                            let params: mouseEvent = {\n                                i: indexI,\n                                j: indexJ,\n                                board,\n                                setBoard,\n                                mouseDown,\n                                setMouseDown,\n                                holdingPiece,\n                                setHoldingPiece,\n                                prevPiece,\n                                setPrevPiece,\n                                setSTART,\n                                setTARGET,\n                                boardRef,\n                            };\n                            return (\n                                <div\n                                    key={`cell-${indexI}-${indexJ}`}\n                                    id={`cell-${indexI}-${indexJ}`}\n                                    className={classes.cell}\n                                    onMouseDown={() => handleMouseDown(params)}\n                                    onMouseUp={() => handleMouseUp(params)}\n                                    onMouseEnter={() =>\n                                        handleMouseEnter(params)\n                                    }\n                                    onTouchStart={() => handleMouseDown(params)}\n                                    onTouchMove={() => handleMouseEnter(params)}\n                                    onTouchEnd={() => handleMouseUp(params)}\n                                >\n                                    <div\n                                        id={`cell-${indexI}-${indexJ}-content`}\n                                        className={classname(\n                                            \"background\",\n                                            cell.isWall && \"wall\"\n                                        )}\n                                    >\n                                        {cell.isStart ? (\n                                            <KeyboardArrowRightIcon\n                                                className={classes.svg}\n                                            />\n                                        ) : cell.isTarget ? (\n                                            <ControlCameraIcon\n                                                className={classes.svg}\n                                            />\n                                        ) : null}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                );\n            })}\n        </>\n    );\n}\n\nexport default Board;\n","import React, { ReactElement } from \"react\";\nimport Board from \"./Board\";\n\nfunction Index(): ReactElement {\n    return <Board />;\n}\n\nexport default Index;\n","import newCell, { ICell } from \"./cell\";\n\ninterface coordinate {\n    x: number;\n    y: number;\n}\n\ninterface boardSize {\n    ROW: number;\n    COLUMN: number;\n}\n\nexport type IBoard = Array<Array<ICell>>;\n\nexport function createBoard(\n    BOARD_SIZE: boardSize,\n    START: coordinate,\n    TARGET: coordinate\n): IBoard {\n    const tempBoard: Array<Array<ICell>> = [];\n    for (let i = 0; i < BOARD_SIZE.ROW; i++) {\n        const tempRow: Array<ICell> = [];\n        for (let j = 0; j < BOARD_SIZE.COLUMN; j++) {\n            tempRow.push(\n                newCell(\n                    i,\n                    j,\n                    i === START.y && j === START.x,\n                    i === TARGET.y && j === TARGET.x\n                )\n            );\n        }\n        tempBoard.push(tempRow);\n    }\n    return tempBoard;\n}\n","export default function newCell(\n    row: number,\n    column: number,\n    start: boolean,\n    target: boolean\n): ICell {\n    return {\n        isStart: start,\n        isTarget: target,\n        row,\n        column,\n        isVisited: false,\n        isWall: false,\n        isPassed: false,\n        distance: Infinity,\n        f_astar: Infinity,\n        previous: null,\n    };\n}\n\nexport interface ICell {\n    isStart: boolean;\n    isTarget: boolean;\n    isVisited: boolean;\n    isWall: boolean;\n    isPassed: boolean;\n    row: number;\n    column: number;\n    distance: number;\n    f_astar: number;\n    previous: ICell | null;\n}\n","import React, { ReactElement, useState, useRef, useEffect } from \"react\";\n\nimport Header from \"./Header\";\nimport Content from \"./Content\";\n\nimport { SPEED } from \"../parameter/speed\";\nimport { ALGORITHM, ALGORITHM_OPTIONS } from \"../parameter/algorithm\";\nimport { IBoard, createBoard } from \"../utilities/board\";\nimport {\n    BOARD_SIZE,\n    coordinate,\n    START as start,\n    TARGET as target,\n    CELL_SIZE,\n    IBoardSize,\n} from \"../parameter/board\";\nimport {\n    IAlgorithmFunction,\n    getShortestPath,\n    IAlgorithmResult,\n    makeCopyBoard,\n} from \"../algorithms/path\";\nimport { ICell } from \"../utilities/cell\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport { MAZE } from \"../parameter/maze\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    board: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n}));\n\n// context -----------------------------------------------------------------\nexport interface ISpeedContext {\n    speed: number;\n    setSpeed: React.Dispatch<React.SetStateAction<number>> | undefined;\n}\nexport const SpeedContext = React.createContext<ISpeedContext>({\n    speed: SPEED.NORMAL,\n    setSpeed: undefined,\n});\n\nexport interface IAlgorithmContext {\n    algorithm: string;\n    setAlgorithm: React.Dispatch<React.SetStateAction<string>> | undefined;\n}\nexport const AlgorithmContext = React.createContext<IAlgorithmContext>({\n    algorithm: ALGORITHM_OPTIONS.DIJKSTRA,\n    setAlgorithm: undefined,\n});\n\nexport interface IBoardContext {\n    board: IBoard;\n    setBoard: React.Dispatch<React.SetStateAction<IBoard>> | undefined;\n    START: coordinate;\n    setSTART: React.Dispatch<React.SetStateAction<coordinate>> | undefined;\n    TARGET: coordinate;\n    setTARGET: React.Dispatch<React.SetStateAction<coordinate>> | undefined;\n    boardRef: React.MutableRefObject<null> | undefined;\n}\nexport const BoardContext = React.createContext<IBoardContext>({\n    board: createBoard(BOARD_SIZE, start, target),\n    setBoard: undefined,\n    START: start,\n    setSTART: undefined,\n    TARGET: target,\n    setTARGET: undefined,\n    boardRef: undefined,\n});\n\n// -------------------------------------------------------------------------\n\nfunction Index(): ReactElement {\n    const classes = useStyles();\n    const boardRef = useRef(null);\n\n    // visualization option\n    const [speed, setSpeed] = useState<number>(SPEED.NORMAL);\n    const [algorithm, setAlgorithm] = useState<string>(\n        ALGORITHM_OPTIONS.DIJKSTRA\n    );\n\n    // board properties\n    const [animated, setAnimated] = useState<boolean>(false);\n    const [START, setSTART] = useState<coordinate>(start);\n    const [TARGET, setTARGET] = useState<coordinate>(target);\n    const [boardSize, setBoardSize] = useState<IBoardSize>(BOARD_SIZE);\n    const [board, setBoard] = useState<IBoard>(\n        createBoard(BOARD_SIZE, start, target)\n    );\n\n    function resetRefs(boardSize: IBoardSize) {\n        for (let row = 0; row < boardSize.ROW; row++) {\n            for (let column = 0; column < boardSize.COLUMN; column++) {\n                try {\n                    (boardRef as any).current.querySelector(\n                        `#cell-${row}-${column}-content`\n                    ).className = (boardRef as any).current\n                        .querySelector(`#cell-${row}-${column}-content`)\n                        .className.split(\" \")\n                        .filter(\n                            (cname: string) =>\n                                cname !== \"visited\" && cname !== \"passed\"\n                        )\n                        .join(\" \");\n                } catch (err) {}\n            }\n        }\n    }\n\n    function resetBoard(): void {\n        const { newBoardSize, Start, Target } = getBoardSize();\n        resetRefs(newBoardSize);\n        setSTART(Start);\n        setTARGET(Target);\n        setAnimated(false);\n        setBoardSize(newBoardSize);\n        setBoard(createBoard(newBoardSize, Start, Target));\n    }\n\n    const boardContextInitValue = {\n        board,\n        setBoard,\n        START,\n        setSTART,\n        TARGET,\n        setTARGET,\n        boardRef,\n    };\n\n    // algorithm visualization process --------------\n    function cleanBoard(): IBoard {\n        resetRefs(boardSize);\n        const copyBoard = makeCopyBoard(board);\n        const newBoard: IBoard = [];\n        for (let row of copyBoard) {\n            let tempRow: Array<ICell> = [];\n            for (let cell of row) {\n                let newCell: ICell = {\n                    ...cell,\n                    isPassed: false,\n                    isVisited: false,\n                    distance: Infinity,\n                    previous: null,\n                    f_astar: Infinity,\n                };\n                tempRow.push(newCell);\n            }\n            newBoard.push(tempRow);\n        }\n        return newBoard;\n    }\n\n    function analyzeBoard(): void {\n        const newBoard = cleanBoard();\n        setAnimated(true);\n        const pathAlgorithm = ALGORITHM[algorithm];\n        const value: IAlgorithmFunction = {\n            board: newBoard,\n            startCell: board[START.y][START.x],\n            targetCell: board[TARGET.y][TARGET.x],\n        };\n        let { modifiedBoard, visualizedPath }: IAlgorithmResult = pathAlgorithm(\n            value\n        );\n        setBoard(modifiedBoard);\n        animateBoard(visualizedPath, modifiedBoard);\n    }\n\n    function animateBoard(path: Array<ICell>, modifiedBoard: IBoard): void {\n        const pathLength = path.length;\n        for (let i = 0; i < pathLength; i++) {\n            const { row, column } = path[i];\n            setTimeout(() => {\n                (boardRef as any).current.querySelector(\n                    `#cell-${row}-${column}-content`\n                ).className += \" visited\";\n            }, speed * i);\n        }\n        const finalPath = getShortestPath(modifiedBoard, TARGET);\n        setTimeout(() => {\n            animatePath(finalPath);\n        }, speed * pathLength);\n    }\n\n    function animatePath(path: Array<ICell>): void {\n        let pathLength = path.length;\n        for (let i = 0; i < pathLength; i++) {\n            const { row, column } = path[i];\n            setTimeout(() => {\n                (boardRef as any).current.querySelector(\n                    `#cell-${row}-${column}-content`\n                ).className = (boardRef as any).current\n                    .querySelector(`#cell-${row}-${column}-content`)\n                    .className.split(\" \")\n                    .map((cname: string) =>\n                        cname === \"visited\" ? \"passed\" : cname\n                    )\n                    .join(\" \");\n            }, 2 * speed * i);\n        }\n    }\n\n    // maze generation visualization ----------------\n    function cleanWalls() {\n        const newBoard: IBoard = [];\n        for (let row of board) {\n            let tempRow: Array<ICell> = [];\n            for (let cell of row) {\n                let newCell: ICell = {\n                    ...cell,\n                    isWall: false,\n                };\n                tempRow.push(newCell);\n            }\n            newBoard.push(tempRow);\n        }\n        setBoard(newBoard);\n    }\n\n    function generateMaze(MAZE_OPTION: string) {\n        if (animated) cleanBoard();\n        cleanWalls();\n        const mazeOption = MAZE[MAZE_OPTION];\n        const { modifiedBoard, visualizedPath } = mazeOption({\n            board,\n            start: START,\n            target: TARGET,\n        });\n        for (let i = 0; i < visualizedPath.length; i++) {\n            const { row, column } = visualizedPath[i];\n            setTimeout(() => {\n                (boardRef as any).current.querySelector(\n                    `#cell-${row}-${column}-content`\n                ).className += \" wall\";\n            }, (speed * i) / 20);\n        }\n        setTimeout(() => {\n            setBoard(modifiedBoard);\n        }, (speed * visualizedPath.length) / 20);\n    }\n\n    // detectinng window size\n    function getBoardSize(): {\n        newBoardSize: IBoardSize;\n        Start: coordinate;\n        Target: coordinate;\n    } {\n        var chrome = /Chrome/.test(navigator.userAgent);\n        var height = chrome\n            ? document.documentElement.clientHeight\n            : window.innerHeight;\n        var width = chrome\n            ? document.documentElement.clientWidth\n            : window.innerWidth;\n\n        var headerOffset = width <= 672 ? 140 : width <= 792 ? 120 : 100;\n\n        const newBoardSize: IBoardSize = {\n            ROW: Math.floor((height - headerOffset) / (CELL_SIZE + 2)),\n            COLUMN: Math.floor(width / (CELL_SIZE + 2)),\n        };\n\n        const Start: coordinate = {\n            x: Math.floor(newBoardSize.COLUMN / 3),\n            y: Math.floor(newBoardSize.ROW / 2),\n        };\n        const Target: coordinate = {\n            x: newBoardSize.COLUMN - Start.x,\n            y: Math.floor(newBoardSize.ROW / 2),\n        };\n        return { newBoardSize, Start, Target };\n    }\n\n    useEffect(() => {\n        function resizeWindow(): void {\n            const { newBoardSize, Start, Target } = getBoardSize();\n            setBoardSize(newBoardSize);\n            setSTART(Start);\n            setTARGET(Target);\n            setBoard(createBoard(newBoardSize, Start, Target));\n        }\n        resizeWindow();\n    }, []);\n\n    return (\n        <SpeedContext.Provider value={{ speed, setSpeed }}>\n            <AlgorithmContext.Provider value={{ algorithm, setAlgorithm }}>\n                <BoardContext.Provider value={boardContextInitValue}>\n                    <div>\n                        <Header\n                            visualize={analyzeBoard}\n                            resetBoard={resetBoard}\n                            generateMaze={generateMaze}\n                        />\n                        <div ref={boardRef} className={classes.board}>\n                            <Content />\n                        </div>\n                    </div>\n                </BoardContext.Provider>\n            </AlgorithmContext.Provider>\n        </SpeedContext.Provider>\n    );\n}\n\nexport default Index;\n","import React from \"react\";\nimport { Typography, Link, makeStyles, Theme } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    copyright: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nexport default function Copyright(): JSX.Element {\n    const classes = useStyles();\n    return (\n        <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            align=\"center\"\n            className={classes.copyright}\n        >\n            {/* {\"Copyright © \"} */}\n            {\"Created By : \"}\n            <Link color=\"inherit\" href=\"https://www.github.com/nicktanryo\">\n                Nicholas Tanryo\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport PathFinding from \"./components\";\nimport Copyright from \"./components/Copyright\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <PathFinding />\n            <Copyright />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}